name: Terraform

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - '**/README.md'
env:
  tf_version: '1.5.7'
  tg_version: '0.53.2'
  tg_dir: './'
  
jobs:
  terraform:
    name: Plan / Apply
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Use Terraform 1.3.7
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7

    # Terragrunt Check
    - name: Terraform Format
      id: fmt
      uses: gruntwork-io/terragrunt-action@v2
      with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Pull Request Comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
        FMT: "${{ steps.fmt.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          const output = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${process.env.FMT}
          \`\`\`

          </details>
          #### Terraform JSON (steps) ⚙️ \` ${{ toJSON(steps) }}\`
          #### Terraform JSON (process) ⚙️ \` ${{ toJSON(process.env) }}\`
          #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

#    - name: Terraform Status
#      if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure'
#      run: exit 1
#
#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#      run: terraform apply -auto-approve -input=false