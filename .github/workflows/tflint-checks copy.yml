name: 'Terraform'

on: [pull_request]

env:
  tf_version: '1.5.7'
  tg_version: '0.53.2'
  working_dir: './'

jobs:
  checks:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      # Run a terragrunt HCL fmt for push and PR on non-main branch
      - name: Check terragrunt HCL
        id: fmt
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
          tg_comment: 1

        # Run Checkov against configuration
      - name: Checkov
        if: github.event_name == 'pull_request' && (success() || failure())
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          quiet: true
          framework: terraform
          container_user: 1000
          output_format: json
          soft_fail: false
          skip_check: CKV_AZURE_88,CKV_AZURE_71,CKV_AZURE_16,CKV_AZURE_80,CKV_AZURE_63,CKV_AZURE_18,CKV_AZURE_65,CKV_AZURE_17,CKV_AZURE_13,CKV_AZURE_78,CKV_AZURE_66,CKV_AZURE_44,CKV_AZURE_35,CKV_AZURE_43,CKV_AZURE_33,CKV_AZURE_3,CKV2_AZURE_1,CKV2_AZURE_18,CKV2_AZURE_8,CKV2_AZURE_21,CKV_GIT_4



      - name: Reformat Plan
        if: github.event_name == 'pull_request' && (success() || failure())
        run: |
          echo '${{join(steps.fmt.outputs.*)}}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        if: github.event_name == 'pull_request' && (success() || failure())
        run: |
          FMT=$(cat plan.txt)
          echo "FMT<<EOF" >> $GITHUB_ENV
          echo "$FMT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to GitHub PR
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## ${{ matrix.path }} fmt
            ```diff
            ${{ env.FMT }}
            ```


# Add - a comment to pull requests with plan results
      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request' && (success() || failure())
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`\`\`terraform\`${{join(steps.fmt.outputs.*)}}\`\`\`\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Checkov üß™\`${{ steps.checkov.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            <details><summary>Show Checkov Results</summary>

            ${process.env.CHECKOV_RESULTS}

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })






    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init
#      id: init
#      env:
#        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
#        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#        RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
#        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
#        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
#      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"


#
#    # Run a terraform validate for push and PR on non-main branch
#    # Run even if formatting fails
#    - name: Terraform Validate
#      id: validate
#      if: github.ref != 'refs/heads/main' && (success() || failure())
#      run: terraform validate -no-color
#
#    # Run a terraform plan for pull requests only
#    - name: Terraform Plan
#      id: plan
#      env:
#        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
#        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#      if: github.event_name == 'pull_request'
#      run: terraform plan -no-color

    
#    # Add a comment to pull requests with plan results
#    - name: add-plan-comment
#      id: comment
#      uses: actions/github-script@v3
#      if: github.event_name == 'pull_request' && (success() || failure())
#      env:
#        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        script: |
#          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
#          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#          #### Checkov üß™\`${{ steps.checkov.outcome }}\`
#
#          <details><summary>Show Plan</summary>
#
#          \`\`\`${process.env.PLAN}\`\`\`
#
#          </details>
#
#          <details><summary>Show Checkov Results</summary>
#
#          ${process.env.CHECKOV_RESULTS}
#
#          </details>
#
#          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#
#          github.issues.createComment({
#            issue_number: context.issue.number,
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            body: output
#          })
#
##      # On push to main, build or change infrastructure according to Terraform configuration files
##    - name: Terraform Apply
##      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
##      env:
##        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
##        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
##        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
##        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
##      run: terraform apply -auto-approve