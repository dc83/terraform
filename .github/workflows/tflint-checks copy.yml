name: Terraform

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - '**/README.md'
env:
  tf_version: '1.5.7'
  tg_version: '0.53.2'
  working_dir: 'environment'

jobs:
  setup:
    name: Setup AWS
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
  # Terragrunt Check
  checks:
    name: Terragrunt Checks
    runs-on: ubuntu-latest
    outputs:
      fmt-outcome: ${{ steps.fmt.outcome }}
      fmt-result: ${{ steps.fmt.outputs.tg_action_output }}
    needs: [ setup ]      
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Check terragrunt HCL
      id: fmt
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_dir: ${{ env.working_dir }}/${{ matrix.path }}
        tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

#        tg_command: 'hclfmt --terragrunt-check --terragrunt-diff --terragrunt-json-log'
  init:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev
          - prod
    outputs:
      plan-outcome: ${{ steps.plan.outcome }}
      plan-result: ${{ steps.plan.outputs.tg_action_output }}
    needs: [ checks ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Init
        id: init
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}/${{ matrix.path }}
          tg_command: 'run-all init --terragrunt-non-interactive'
        continue-on-error: true

  plan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev
          - prod
    outputs:
      plan-outcome: ${{ steps.plan.outcome }}
      plan-result: ${{ steps.plan.outputs.tg_action_output }}
    needs: [ init ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Plan
        id: plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}/${{ matrix.path }}
          tg_command: 'run-all plan'
        continue-on-error: true

  comment:
    runs-on: ubuntu-latest
    needs: [checks, plan]
    steps:
      - name: Pull Request Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            const output = `#### Terragrunt Format and Style ğŸ–Œ \`${{ needs.checks.outputs.fmt-outcome }}\`
            <details><summary>Format Output</summary>
              <code>${{ needs.checks.outputs.fmt-result }}</code>
            </details>
            \n\n\n\n

            #### Terraform Validation ğŸ¤– \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan ğŸ“– \`${{ needs.checks.outputs.plan-outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${{ needs.checks.outputs.plan-result }}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  #    - name: Terraform Status
  #      if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure'
  #      run: exit 1
  #
  #    - name: Terraform Apply
  #      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #      run: terraform apply -auto-approve -input=false